---
- name: Disable swap
  ansible.builtin.command: swapoff -a
  become: true

- name: Ensure swap disabled on reboot
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^(.*\sswap\s.*)$'
    replace: '# \1'
  become: true

- name: Install container runtime dependencies
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg
    - lsb-release
  become: true

- name: Install Docker (if selected)
  when: container_runtime == "docker"
  block:
    - name: Add Docker GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      become: true

    - name: Add Docker repo
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        state: present
      become: true

    - name: Install Docker CE
      ansible.builtin.package:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
      become: true

- name: Install CRI-O (если выбран)
  when: container_runtime == "cri-o"
  block:
    - name: Add CRI-O repo
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/libcontainers-archive-keyring.gpg] \
          https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_{{ ansible_distribution_release }}/ /
        state: present
        filename: libcontainers
      become: true

    - name: Install CRI-O
      ansible.builtin.package:
        name:
          - cri-o
        state: present
      become: true

- name: Add Kubernetes apt key
  ansible.builtin.apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  become: true

- name: Add Kubernetes repo
  ansible.builtin.apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
  become: true

- name: Install kubeadm, kubelet, kubectl
  ansible.builtin.package:
    name:
      - kubelet={{ k8s_version }}
      - kubeadm={{ k8s_version }}
      - kubectl={{ k8s_version }}
    state: present
    update_cache: yes
  become: true

- name: Hold Kubernetes packages at current version
  ansible.builtin.apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    mark: hold
  become: true

- name: Initialize Kubernetes control-plane
  ansible.builtin.command: >
    kubeadm init
    --apiserver-advertise-address={{ ansible_default_ipv4.address }}
    --control-plane-endpoint={{ control_plane_endpoint }}
    --pod-network-cidr={{ pod_network_cidr }}
    --service-cidr={{ service_cidr }}
    --token-ttl={{ join_token_ttl }}
    --kubernetes-version={{ k8s_version | regex_replace('-00','') }}
  args:
    creates: /etc/kubernetes/admin.conf
  register: kubeadm_init
  become: true

- name: Extract discovery token CA cert hash
  ansible.builtin.shell: |
    echo "{{ kubeadm_init.stdout_lines | select('search','discovery-token-ca-cert-hash') | list | first }}" \
    | awk '{print $2}'
  register: ca_hash
  changed_when: false

- name: Set fact discovery_token_ca_cert_hash
  ansible.builtin.set_fact:
    discovery_token_ca_cert_hash: "{{ ca_hash.stdout }}"
  
- name: Copy kubeconfig to user
  ansible.builtin.command: >
    mkdir -p /home/{{ ansible_user }}/.kube &&
    cp -i /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config &&
    chown {{ ansible_user }}:{{ ansible_user }} /home/{{ ansible_user }}/.kube/config
  become: true

- name: Install Calico CNI
  ansible.builtin.template:
    src: calico.yaml.j2
    dest: /tmp/calico.yaml
  become: true

- name: Apply Calico manifest
  ansible.builtin.command: kubectl apply -f /tmp/calico.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  become: true
